// ===============================================================================
// ROUTING
// ===============================================================================

// First, import MySQL connection.
var connection = require("../database/connection.js");

module.exports = function (app) {
    // LOGIN ROUTE
    // Only the person who knows the username and password can 
    // ...
    app.post("/login", function (req, res) {
        //req.body has the user name and password
        console.log(req.body);

        //==========ADDITIONAL BIG WARNING!!!!!===========
        //WARNING: never ever EVER 'roll your own' password encryption!  (One reason will be clear in a minute ;) 
        //Passwords are one area where we want to stand on the shoulders of giants and use middleware such as passport.js to help us :)

        connection.query(`SELECT * FROM users WHERE username="${req.body.username}" AND password="${req.body.password}"`, function (err, results) {
            if (err) { //if there is an error, log it
                return res.json(err);
            }
            res.json(results); //otherwise, return the results so we can show the user their profile!
        });

        //NOTE: if you use concatenation, it looks like this:
        //'SELECT * FROM users WHERE username="' + req.body.username + '" AND password="' + req.body.password + '"'
        //STILL vulnerable unfortunately

        //How do we defeat this malfeasance?  One tool is parameterization!  We want the MySQL package to help us watch out for hijinx:
        // connection.query("SELECT * FROM users WHERE username = ? AND password = ?", [req.body.username, req.body.password], function (err, results) {
    });


    // API GET Requests
    // Below code handles when users "visit" a page.
    // ---------------------------------------------------------------------------
    app.get("/api/users/:id", function (req, res) {
        //Question: what might happen if we used * here? 
        //Is there something else we might want to do?
        connection.query("SELECT * FROM users WHERE ID=" + req.params.id, function (err, results) {
            if (err) {
                console.log(err);
                return res.json(err);
            }
            res.json(results);
        });
    });

    // API POST Requests
    // Below code handles when a user submits a form and thus submits data to the server.
    // In each of the below cases, when a user submits form data (a JSON object)
    // ...the JSON is pushed to the db
    // ---------------------------------------------------------------------------

    app.post("/api/users", function (req, res) {
        // req.body is available since we're using the body parsing middleware
        users.push(req.body);
        // add the user to our db...

        // and send back what we just got
        res.json(req.body);
    });



};